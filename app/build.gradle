apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testApplicationId "com.example.app.stepDefinitions"
        testInstrumentationRunner "com.example.app.helpers.Instrumentation"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
    }
}

// Task to retrieve Cucumber test reports
gradle.taskGraph.afterTask { task, TaskState state ->
    if ((task == connectedAndroidTest) || (task == connectedCheck)) {
        def reportDir = new File(project.buildDir, "cucumber-reports")
        if (!reportDir.exists()) {
            reportDir.mkdirs()
        }
        println 'Retrieving Cucumber test report to ' + project.buildDir
        def processBuilder = new ProcessBuilder(
                ['adb', 'pull', '/mnt/sdcard/cucumber-reports/', reportDir.getAbsolutePath()])
        processBuilder.start()
    }
}

// Read Cucumber tags from command line like: ./gradlew connectedAndroidTest -Dtags="@login-scenarios,@kitkat"
def getTestTags() {
    return project.hasProperty("tags") ? project.getProperties().get("tags") : ""
}

task(fetchReports) << {
    def reportDir = new File(project.buildDir, "cucumber-reports")
    if (!reportDir.exists()) {
        reportDir.mkdirs()
    }
    println 'Retrieving Cucumber test report to ' + project.buildDir
    def processBuilder = new ProcessBuilder(
            ['adb', 'pull', '/mnt/sdcard/com.autodesk.autocadws.staging.debug/aaa', reportDir.getAbsolutePath()])
    processBuilder.start()
}

configurations.all {
    // resolutionStrategy.force 'com.google.code.findbugs:jsr305:2.0.1'
    resolutionStrategy.force 'com.android.support:support-annotations:23.0.1'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'

    // Testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'

    // Espresso and Cucumber
    androidTestCompile 'com.android.support:support-annotations:23.0.1'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'info.cukes:cucumber-android:1.2.0@jar'
    androidTestCompile 'info.cukes:cucumber-picocontainer:1.2.0'
    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
}
